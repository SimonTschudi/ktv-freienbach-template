---
import { type Config } from "./Config";
import { ulid } from "ulid";

interface Props {
    componentName: string;
    config: Config;
}
const { componentName, config } = Astro.props as Props;
const { label, name, type, defaultValue } = config;
const id = ulid();
const sliderId = ulid();
---

<div class="input-config">
    <label for={id} class="label">
        {label}
    </label>
    <div class="input-container">
        <input id={id} name={id} type={type} value={defaultValue} />
        {
            type === "color" && (
                <span class="color-opacity">
                    <label for={sliderId} class="label" for="opacity">
                        Transparenz
                    </label>
                    <input
                        id={sliderId}
                        name={sliderId}
                        type="range"
                        min="0"
                        max="100"
                        value="100"
                    />
                </span>
            )
        }
    </div>
</div>

<style>
    .input-config {
        display: flex;
        flex-direction: column;
    }

    .input-container {
        display: flex;
        gap: 16px;
    }

    .label {
        font-size: 14px;
        margin-bottom: 4px;
    }

    input {
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 16px;
    }

    input[type="datetime-local"] {
        width: 100%;
    }

    input[type="color"] {
        width: 40px;
        height: 40px;
        border: none;
        cursor: pointer;
    }
    .color-opacity {
        display: inline-flex;
        flex-direction: column;
    }
</style>

<script define:vars={{ componentName, name, type, id, sliderId }}>
    const input = document.getElementById(id);
    const opacity = document.getElementById(sliderId);

    function updateInput(e) {
        document
            .querySelector(componentName)
            .setAttribute(name, e.target.value);
    }

    function hexToRGBA(hex, alpha) {
        if (alpha == null || alpha === 1) {
            return hex;
        }
        if (alpha === 0) {
            return "transparent";
        }
        hex = hex.replace("#", "");
        let r = parseInt(hex.substring(0, 2), 16);
        let g = parseInt(hex.substring(2, 4), 16);
        let b = parseInt(hex.substring(4, 6), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }

    function updateColor() {
        const color = input.value;
        const opacityValue = opacity.value / 100;
        const finalColor = hexToRGBA(color, opacityValue);

        document.querySelector(componentName).setAttribute(name, finalColor);
    }

    if (type === "color") {
        input.addEventListener("input", updateColor);
        opacity?.addEventListener("input", updateColor);
    } else {
        input.addEventListener("input", updateInput);
    }
</script>
